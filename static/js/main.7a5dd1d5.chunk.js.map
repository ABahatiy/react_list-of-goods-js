{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","id","name","SORT_FIELD_ALPHABET","SORT_FIELD_LENGTH","App","useState","sortfield","setSortField","reverse","setReverse","query","originalGoods","setOriginalGoods","handleSort","field","newReverse","sortedGoods","sort","good1","good2","localeCompare","length","visibleGoods","goods","preparedGoods","filter","good","toLowerCase","includes","getPreparedGoods","className","type","cn","onClick","reversedGoods","map","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a5dd1d5.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  { id: 1, name: 'Dumplings' },\n  { id: 2, name: 'Carrot' },\n  { id: 3, name: 'Eggs' },\n  { id: 4, name: 'Ice cream' },\n  { id: 5, name: 'Apple' },\n  { id: 6, name: 'Bread' },\n  { id: 7, name: 'Fish' },\n  { id: 8, name: 'Honey' },\n  { id: 9, name: 'Jam' },\n  { id: 10, name: 'Garlic' },\n];\n\nconst SORT_FIELD_ALPHABET = 'alphabetically';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction getPreparedGoods(goods, { sortfield, query, reverse }) {\n  let preparedGoods = [...goods];\n\n  if (query) {\n    preparedGoods = preparedGoods\n      .filter(good => good.name.toLowerCase()\n        .includes(query.toLowerCase()));\n  }\n\n  if (sortfield) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortfield) {\n        case SORT_FIELD_ALPHABET:\n          return reverse\n            ? good2.name.localeCompare(good1.name)\n            : good1.name.localeCompare(good2.name);\n        case SORT_FIELD_LENGTH:\n          return reverse\n            ? good2.name.length - good1.name.length\n            : good1.name.length - good2.name.length;\n        default:\n          return 0;\n      }\n    });\n  } else if (reverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortfield, setSortField] = useState('');\n  const [reverse, setReverse] = useState(false);\n  const [query] = useState('');\n  const [originalGoods, setOriginalGoods] = useState([...goodsFromServer]);\n\n  const handleSort = (field) => {\n    const newReverse = field === sortfield ? !reverse : reverse; // Keep the current reverse state if the same field is clicked\n\n    setSortField(field);\n\n    const sortedGoods = [...originalGoods];\n\n    // Sort the goods\n    sortedGoods.sort((good1, good2) => {\n      switch (field) {\n        case SORT_FIELD_ALPHABET:\n          return newReverse\n            ? good2.name.localeCompare(good1.name)\n            : good1.name.localeCompare(good2.name);\n        case SORT_FIELD_LENGTH:\n          return newReverse\n            ? good2.name.length - good1.name.length\n            : good1.name.length - good2.name.length;\n        default:\n          return 0;\n      }\n    });\n\n    setReverse(newReverse);\n    setOriginalGoods(sortedGoods);\n  };\n\n  const handleReverse = () => {\n    // If it's the initial reverse, reverse the original goods\n    if (!sortfield) {\n      const reversedGoods = [...originalGoods].reverse();\n\n      setOriginalGoods(reversedGoods);\n      setReverse(true);\n      setSortField('');\n    } else {\n      // If it's a reversal after sorting, reverse the sorted goods\n      setReverse(!reverse);\n    }\n  };\n\n  const handleReset = () => {\n    setSortField('');\n    setReverse(false);\n    setOriginalGoods([...goodsFromServer]);\n  };\n\n  const visibleGoods\n    = getPreparedGoods(goodsFromServer, { sortfield, query, reverse });\n  const sortedGoods = [...visibleGoods];\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            {\n              'is-light':\n                sortfield !== SORT_FIELD_ALPHABET\n                || (reverse && sortfield !== SORT_FIELD_ALPHABET),\n            },\n          )}\n          onClick={() => handleSort(SORT_FIELD_ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-success',\n            {\n              'is-light':\n                sortfield !== SORT_FIELD_LENGTH\n                || (reverse && sortfield !== SORT_FIELD_LENGTH),\n            },\n          )}\n          onClick={() => handleSort(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', { 'is-light': !reverse })}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {(sortfield || reverse || query) && (\n          <button\n            type=\"button\"\n            className={cn('button is-danger', 'is-light')}\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(good => (\n          <li key={good.id} data-cy=\"Good\">{good.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}